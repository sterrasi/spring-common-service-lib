buildscript {
	dependencies {
		classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.50.0'
	}
}

plugins {
	id 'java'
	id 'idea'
	id 'org.springframework.boot' version "${springboot_version}"
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.diffplug.spotless' version "6.25.0"
}

group = 'com.github.sterrasi'
version = (findProperty('version') == 'unspecified') ? '0.0.1-SNAPSHOT' : version
sourceCompatibility = JavaVersion.VERSION_21;
targetCompatibility = JavaVersion.VERSION_21;

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}
bootJar {
	enabled = false
}

jar {
	enabled = true
}

idea {
	module {
		downloadJavadoc = true
		downloadSources = true
	}
}

configurations {
	// create a mockito agent configuration
	mockitoAgent
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	gradlePluginPortal()
	mavenCentral()
}

dependencies {

	// spring boot
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// misc
	implementation "com.fasterxml.jackson.core:jackson-databind"
	implementation libs.commons.lang3

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// The spring boot annotation processor must come after lombok: https://docs.spring.io/spring-boot/specification/configuration-metadata/annotation-processor.html
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// for validation
	implementation 'org.hibernate:hibernate-validator:8.0.2.Final'

	// test
	testImplementation libs.bundles.mockito
	mockitoAgent(libs.mockito.core) { transitive = false }
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


subprojects {
	spotless {

		format 'misc', {
			// define the files to apply `misc` to
			target '*.gradle', '.gitattributes', '.gitignore'

			// define the steps to apply to those files
			trimTrailingWhitespace()
			leadingSpacesToTabs() // or leadingTabsToSpaces. Takes an integer argument if you don't like 4
			endWithNewline()
		}
		java {
			// don't need to set target, it is inferred from java

			// apply a specific flavor of google-java-format
			palantirJavaFormat('2.50.0')
			// fix formatting of type annotations
			formatAnnotations()
			// make sure every file has the following copyright header.
			// optionally, Spotless can set copyright years by digging
			// through git history (see "license" section below)
			licenseHeader '/* (C)$YEAR */'
		}
	}
}

compileJava.dependsOn spotlessApply

test {
	useJUnitPlatform()
}

tasks {
	test {
		useJUnitPlatform()
		jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"
	}
}

// compiler args
tasks.withType(JavaCompile) {
	// so that the 'spring-configuration-metadata' is processed
	inputs.files(tasks.named('processResources'))
	options.compilerArgs = [
	        '-parameters'
	]
}

// duplicate strategy for spring-configuration-metadata
tasks.withType(org.gradle.jvm.tasks.Jar) {
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}